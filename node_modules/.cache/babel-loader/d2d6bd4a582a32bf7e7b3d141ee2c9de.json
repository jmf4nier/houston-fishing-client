{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\Coding\\\\fishing_app_houston\\\\Client\\\\src\\\\components\\\\messages\\\\messages.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchMessages, postMessage, patchMessage } from '../actions/messageActions';\nimport { showLogin } from '../actions/userActions';\nimport { Button, Comment, Form, Header } from 'semantic-ui-react';\n\nclass Messages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      reply: {},\n      message: '',\n      isReply: false,\n      idChosen: null,\n      keyChosen: null\n    };\n\n    this.handleChange = event => {\n      const content = event.target.value;\n\n      if (event.target.name === 'comment') {\n        this.setState({\n          message: content\n        });\n      } else if (event.target.name === 'reply') {\n        this.setState({\n          reply: content\n        });\n      } else if (event.target.name === 'image') {\n        console.log(content);\n        this.setState({\n          imageFile: content\n        });\n      }\n    };\n\n    this.handleReplies = (indexOfReply, idOfMessage) => {\n      this.setState({\n        isReply: !this.state.isReply,\n        keyChosen: indexOfReply,\n        idChosen: idOfMessage\n      });\n    };\n\n    this.handleReplySubmit = () => {\n      this.setState({\n        isReply: !this.state.isReply\n      });\n      const data = {\n        message_id: this.state.idChosen,\n        reply: {\n          author: 'me',\n          content: this.state.reply,\n          date: new Date()\n        }\n      };\n      this.props.patchMessage(data);\n    };\n\n    this.capitalizeUsername = name => {\n      if (name !== undefined) {\n        return name.charAt(0).toUpperCase() + name.slice(1);\n      } else {\n        return null;\n      }\n    };\n\n    this.handleCommentSubmit = event => {\n      const author = this.props.currentUser.username;\n      const messageContent = this.state.message;\n      const data = {\n        lake_id: this.props.lake._id,\n        replies: [],\n        author: author,\n        content: messageContent,\n        date: new Date()\n      };\n      this.props.postMessage(data);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchMessages(this.props.lake._id); //passing the current lake's id to the fetch to get only related messages\n  }\n\n  render() {\n    const token = window.localStorage.getItem('token');\n    const commentField = React.createElement(Form, {\n      reply: true,\n      onSubmit: () => this.handleCommentSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Form.TextArea, {\n      name: \"comment\",\n      style: {\n        height: '50px'\n      },\n      onChange: event => this.handleChange(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Button, {\n      content: \"Post Comment\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      primary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }));\n    const replyField = React.createElement(Form, {\n      reply: true,\n      onSubmit: () => this.handleReplySubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Form.TextArea, {\n      name: \"reply\",\n      style: {\n        height: '50px'\n      },\n      onChange: event => this.handleChange(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Button, {\n      content: \"Reply\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      primary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }));\n    const messages = this.props.messages.map((message, index) => React.createElement(Comment, {\n      key: index,\n      style: {\n        textAlign: 'left',\n        fontSize: '1.25vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Comment.Avatar, {\n      src: \"https://react.semantic-ui.com/images/avatar/small/elliot.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Comment.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Comment.Author, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.capitalizeUsername(message.author)), React.createElement(Comment.Metadata, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Yesterday at 12:30AM\")), React.createElement(Comment.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, message.content)), React.createElement(Comment.Actions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, token !== null ? React.createElement(Comment.Action, {\n      style: {\n        color: 'blue',\n        opacity: '.5'\n      },\n      onClick: () => this.handleReplies(index, message._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Reply\") : null, this.state.keyChosen === index && this.state.isReply ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, replyField, \" \") : null)), message.replies.length > 0 ? message.replies.map((reply, index) => React.createElement(Comment.Group, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      style: {\n        textAlign: 'left',\n        fontSize: '1.25vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Comment.Avatar, {\n      src: \"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Comment.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Comment.Author, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, this.capitalizeUsername(reply.author)), React.createElement(Comment.Metadata, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Just now\")), React.createElement(Comment.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, reply.content))))) : null));\n    return React.createElement(Comment.Group, {\n      className: \"comment-group\",\n      style: {\n        backgroundColor: 'rgb(248, 246, 246)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h1\",\n      dividing: true,\n      style: {\n        fontSize: '1.5'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.props.lake.name, \"'s Comments\"), messages, token !== null ? commentField : React.createElement(\"h3\", {\n      style: {\n        cursor: 'pointer',\n        color: '#069'\n      },\n      onClick: () => {\n        this.props.showLogin(true);\n        window.scrollTo(0, 0); ////scrolls to top of window when login clicked\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Login To Comment\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  messages: state.messageReducer.messages,\n  lake: state.lakeReducer.currentLake,\n  currentUser: state.userReducer.currentUser\n});\n\nexport default connect(mapStateToProps, {\n  fetchMessages,\n  postMessage,\n  patchMessage,\n  showLogin\n})(Messages);","map":{"version":3,"sources":["C:\\Users\\Jason\\Desktop\\Coding\\fishing_app_houston\\Client\\src\\components\\messages\\messages.js"],"names":["React","connect","fetchMessages","postMessage","patchMessage","showLogin","Button","Comment","Form","Header","Messages","Component","state","reply","message","isReply","idChosen","keyChosen","handleChange","event","content","target","value","name","setState","console","log","imageFile","handleReplies","indexOfReply","idOfMessage","handleReplySubmit","data","message_id","author","date","Date","props","capitalizeUsername","undefined","charAt","toUpperCase","slice","handleCommentSubmit","currentUser","username","messageContent","lake_id","lake","_id","replies","componentDidMount","render","token","window","localStorage","getItem","commentField","height","replyField","messages","map","index","textAlign","fontSize","color","opacity","length","backgroundColor","cursor","scrollTo","mapStateToProps","messageReducer","lakeReducer","currentLake","userReducer"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {fetchMessages, postMessage, patchMessage} from '../actions/messageActions';\r\nimport { showLogin } from '../actions/userActions'\r\nimport { Button, Comment, Form, Header } from 'semantic-ui-react'\r\n\r\n\r\n\r\nclass Messages extends React.Component{\r\n\r\n    state={\r\n        reply: {},\r\n        message: '',\r\n        isReply: false,\r\n        idChosen: null,\r\n        keyChosen: null,\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.fetchMessages(this.props.lake._id);\r\n        //passing the current lake's id to the fetch to get only related messages\r\n    };\r\n\r\n    handleChange = (event) =>{\r\n        const content = event.target.value\r\n        if (event.target.name === 'comment'){\r\n            \r\n            this.setState({\r\n                message: content\r\n            })\r\n        }else if (event.target.name === 'reply'){\r\n            this.setState({\r\n                reply: content\r\n            })\r\n        }else if (event.target.name === 'image'){\r\n            console.log(content)\r\n            this.setState({\r\n                imageFile: content\r\n            })\r\n        }\r\n    };\r\n\r\n    handleReplies = (indexOfReply, idOfMessage) => {\r\n        \r\n        this.setState({\r\n            isReply: !this.state.isReply,\r\n            keyChosen: indexOfReply,\r\n            idChosen: idOfMessage,\r\n        })\r\n    };\r\n\r\n    handleReplySubmit = () => {\r\n        this.setState({\r\n            isReply: !this.state.isReply\r\n        })\r\n        const data = {\r\n            message_id: this.state.idChosen,\r\n            reply:{\r\n                author: 'me',\r\n                content: this.state.reply,\r\n                date: new Date()\r\n            }\r\n        }\r\n        this.props.patchMessage(data)\r\n    };\r\n    capitalizeUsername = (name)=> {\r\n        if (name !== undefined){\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n        }else{return null}\r\n    }\r\n\r\n    handleCommentSubmit = (event) =>{\r\n        const author = this.props.currentUser.username\r\n        const messageContent = this.state.message\r\n        const data = {\r\n            lake_id: this.props.lake._id,\r\n            replies: [],\r\n            author: author,\r\n            content: messageContent,\r\n            date: new Date()\r\n        }\r\n         this.props.postMessage(data);\r\n    }\r\n\r\n    render () {\r\n       \r\n\r\n        const token = window.localStorage.getItem('token')\r\n        \r\n        const commentField = \r\n            <Form reply onSubmit={()=>this.handleCommentSubmit()} >\r\n                <Form.TextArea name='comment' style = {{ height:'50px' }} onChange = { event => this.handleChange(event) } />\r\n                <Button content='Post Comment' labelPosition='left' icon='edit' primary />\r\n            </Form>\r\n\r\n        const replyField = \r\n            <Form reply onSubmit={()=>this.handleReplySubmit()} >\r\n                <Form.TextArea name ='reply' style = {{ height:'50px' }} onChange= { event => this.handleChange(event)} />\r\n                <Button content ='Reply' labelPosition ='left' icon ='edit' primary />\r\n            </Form>\r\n\r\n        const messages = this.props.messages.map((message, index) =>(\r\n            <Comment key={index} style={{textAlign:'left', fontSize:'1.25vw'}}>\r\n            <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/elliot.jpg' />\r\n            <Comment.Content>\r\n                <Comment.Author >{this.capitalizeUsername(message.author)}</Comment.Author>\r\n                <Comment.Metadata>\r\n                <div>Yesterday at 12:30AM</div>\r\n                </Comment.Metadata>\r\n                <Comment.Text>\r\n                <p>{message.content}</p>\r\n                </Comment.Text>\r\n                <Comment.Actions >\r\n\r\n                    {(token !== null)?<Comment.Action style={{color:'blue', opacity:'.5'}} onClick = { () => this.handleReplies(index,message._id) }>Reply</Comment.Action>:null}\r\n\r\n                    {(this.state.keyChosen === index && this.state.isReply) ? <div>{replyField } </div>: null}\r\n\r\n                </Comment.Actions>\r\n            </Comment.Content>\r\n                    \r\n                    \r\n            {(message.replies.length > 0) ? message.replies.map((reply, index)=>(\r\n\r\n            <Comment.Group key={index}>\r\n                    <Comment style={{textAlign:'left',fontSize:'1.25vw'}}>\r\n                    <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/jenny.jpg' />\r\n                        <Comment.Content>\r\n                            <Comment.Author>{this.capitalizeUsername(reply.author)}</Comment.Author>\r\n                            <Comment.Metadata>\r\n                            <div>Just now</div>\r\n                            </Comment.Metadata>\r\n                            <Comment.Text>{reply.content}</Comment.Text>\r\n                        </Comment.Content>\r\n                    </Comment>\r\n                </Comment.Group> )) : null}\r\n        </Comment>\r\n        ))\r\n        \r\n        \r\n        \r\n        return(\r\n            \r\n                <Comment.Group  className='comment-group' style={{backgroundColor:'rgb(248, 246, 246)'}} >\r\n                    <Header as='h1' dividing style={{fontSize:'1.5'}}>\r\n                        {this.props.lake.name}'s Comments\r\n                    </Header>\r\n                    {messages}\r\n                    {(token !== null ) ? commentField \r\n                    : \r\n                    <h3 style={{cursor:'pointer',color:'#069'}}onClick={()=>{this.props.showLogin(true)\r\n                        window.scrollTo(0,0)                                    ////scrolls to top of window when login clicked\r\n                        }} >Login To Comment</h3> }\r\n                </Comment.Group>\r\n                \r\n             \r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => ({\r\n    messages: state.messageReducer.messages,\r\n    lake: state.lakeReducer.currentLake,\r\n    currentUser: state.userReducer.currentUser\r\n\r\n})\r\nexport default connect(mapStateToProps, { fetchMessages, postMessage, patchMessage, showLogin  })(Messages)\r\n\r\n "]},"metadata":{},"sourceType":"module"}