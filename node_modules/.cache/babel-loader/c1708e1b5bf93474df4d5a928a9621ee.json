{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Jason\\\\Desktop\\\\Coding\\\\fishing_app_houston\\\\Client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { FETCH_MESSAGES, POST_MESSAGE, PATCH_MESSAGE } from '../actions/types';\nconst initialState = {\n  messages: [],\n  images: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_MESSAGES:\n      return _objectSpread({}, state, {\n        messages: action.payload\n      });\n\n    case POST_MESSAGE:\n      return _objectSpread({}, state, {\n        messages: [...state.messages, action.payload] //existing array plus new object!\n\n      });\n\n    case PATCH_MESSAGE:\n      return _objectSpread({}, state, {\n        messages: state.messages.map(message => message._id === action.payload._id ? _objectSpread({}, message, {\n          replies: action.payload.replies\n        }) : message)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Jason\\Desktop\\Coding\\fishing_app_houston\\Client\\src\\components\\reducers\\messageReducer.js"],"names":["FETCH_MESSAGES","POST_MESSAGE","PATCH_MESSAGE","initialState","messages","images","state","action","type","payload","map","message","_id","replies"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,QAA2D,kBAA3D;AAEA,MAAMC,YAAY,GAAG;AAEjBC,EAAAA,QAAQ,EAAE,EAFO;AAGjBC,EAAAA,MAAM,EAAE;AAHS,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGH,YAAjB,EAA+BI,MAA/B,EAAsC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKR,cAAL;AACI,+BACOM,KADP;AAEIF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAFrB;;AAKJ,SAAKR,YAAL;AACI,+BACOK,KADP;AAEIF,QAAAA,QAAQ,EAAE,CAAE,GAAGE,KAAK,CAACF,QAAX,EAAqBG,MAAM,CAACE,OAA5B,CAFd,CAEoD;;AAFpD;;AAKJ,SAAKP,aAAL;AAEI,+BACOI,KADP;AAEIF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeM,GAAf,CAAmBC,OAAO,IAChCA,OAAO,CAACC,GAAR,KAAgBL,MAAM,CAACE,OAAP,CAAeG,GAA/B,qBACOD,OADP;AACgBE,UAAAA,OAAO,EAAEN,MAAM,CAACE,OAAP,CAAeI;AADxC,aAEGF,OAHG;AAFd;;AAOJ;AACI,aAAOL,KAAP;AAvBR;AAyBH","sourcesContent":["import { FETCH_MESSAGES, POST_MESSAGE, PATCH_MESSAGE} from '../actions/types'\r\n\r\nconst initialState = {\r\n    \r\n    messages: [],\r\n    images: []\r\n}\r\n\r\nexport default function(state = initialState, action){\r\n    switch(action.type){\r\n        case FETCH_MESSAGES:\r\n            return {\r\n                ...state, \r\n                messages: action.payload\r\n            };\r\n        \r\n        case POST_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: [ ...state.messages, action.payload ] //existing array plus new object!\r\n                \r\n            };\r\n        case PATCH_MESSAGE:\r\n            \r\n            return {\r\n                ...state,\r\n                messages: state.messages.map(message=>\r\n                    message._id === action.payload._id ?{          // finds matching message and replaces the replies Array\r\n                        ...message, replies: action.payload.replies\r\n                    }: message) \r\n            }\r\n        default: \r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}