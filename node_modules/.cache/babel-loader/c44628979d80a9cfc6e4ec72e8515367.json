{"ast":null,"code":"import { POST_USER, LOGIN_USER, SHOW_LOGIN, SHOW_SIGNUP, LOGOUT_USER } from './types';\nexport const postUser = data => async dispatch => {\n  console.log(data);\n  let res = await fetch('http://localhost:5000/users/signup', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password: data.password,\n      username: data.username,\n      email: data.email\n    })\n  });\n  let result = await res.json();\n  dispatch({\n    type: POST_USER,\n    payload: result\n  });\n};\nexport const loginUser = data => async dispatch => {\n  console.log(data);\n  let res = await fetch('http://localhost:5000/users/login', {\n    method: 'POST',\n    headers: {\n      'accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password: data.password,\n      email: data.email\n    })\n  });\n  let result = await res.json();\n  window.localStorage.setItem('token', result.token);\n  dispatch({\n    type: LOGIN_USER,\n    payload: result\n  }); // .then(res => res.json())\n  // .then(result => {\n  //     window.localStorage.setItem('token', result.token)\n  //     dispatch({\n  //         type: LOGIN_USER,\n  //         payload: result\n  //     })\n  // })\n};\nexport const logoutUser = () => dispatch => {\n  dispatch({\n    type: LOGOUT_USER,\n    payload: ''\n  });\n};\nexport const showLogin = state => dispatch => {\n  console.log(state);\n  dispatch({\n    type: SHOW_LOGIN,\n    payload: state\n  });\n};\nexport const showSignup = state => dispatch => {\n  console.log(state);\n  dispatch({\n    type: SHOW_SIGNUP,\n    payload: state\n  });\n};","map":{"version":3,"sources":["C:\\Users\\Jason\\Desktop\\Coding\\fishing_app_houston\\Client\\src\\components\\actions\\userActions.js"],"names":["POST_USER","LOGIN_USER","SHOW_LOGIN","SHOW_SIGNUP","LOGOUT_USER","postUser","data","dispatch","console","log","res","fetch","method","headers","body","JSON","stringify","password","username","email","result","json","type","payload","loginUser","window","localStorage","setItem","token","logoutUser","showLogin","state","showSignup"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,UAAhC,EAA4CC,WAA5C,EAAyDC,WAAzD,QAA4E,SAA5E;AAEA,OAAO,MAAMC,QAAQ,GAAIC,IAAD,IAAW,MAAMC,QAAN,IAAiB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAII,GAAG,GAAG,MAAMC,KAAK,CAAC,oCAAD,EAAsC;AACvDC,IAAAA,MAAM,EAAE,MAD+C;AAEvDC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAF8C;AAMvDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,QAAQ,EAAEX,IAAI,CAACW,QADE;AAEjBC,MAAAA,QAAQ,EAAGZ,IAAI,CAACY,QAFC;AAGjBC,MAAAA,KAAK,EAAEb,IAAI,CAACa;AAHK,KAAf;AANiD,GAAtC,CAArB;AAYA,MAAIC,MAAM,GAAG,MAAMV,GAAG,CAACW,IAAJ,EAAnB;AACAd,EAAAA,QAAQ,CAAC;AACLe,IAAAA,IAAI,EAAEtB,SADD;AAELuB,IAAAA,OAAO,EAAEH;AAFJ,GAAD,CAAR;AAIH,CAnBM;AAoBP,OAAO,MAAMI,SAAS,GAAIlB,IAAD,IAAU,MAAMC,QAAN,IAAiB;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAII,GAAG,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAqC;AACtDC,IAAAA,MAAM,EAAE,MAD8C;AAEtDC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAF6C;AAMtDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,QAAQ,EAAEX,IAAI,CAACW,QADE;AAEjBE,MAAAA,KAAK,EAAEb,IAAI,CAACa;AAFK,KAAf;AANgD,GAArC,CAArB;AAWE,MAAIC,MAAM,GAAG,MAAMV,GAAG,CAACW,IAAJ,EAAnB;AACAI,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,EAAqCP,MAAM,CAACQ,KAA5C;AACArB,EAAAA,QAAQ,CAAC;AACCe,IAAAA,IAAI,EAAErB,UADP;AAECsB,IAAAA,OAAO,EAAEH;AAFV,GAAD,CAAR,CAf8C,CAmBhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA3BM;AA4BP,OAAO,MAAMS,UAAU,GAAG,MAAMtB,QAAQ,IAAG;AAEvCA,EAAAA,QAAQ,CAAC;AACLe,IAAAA,IAAI,EAAElB,WADD;AAELmB,IAAAA,OAAO,EAAE;AAFJ,GAAD,CAAR;AAIH,CANM;AAOP,OAAO,MAAMO,SAAS,GAAIC,KAAD,IAAWxB,QAAQ,IAAG;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAZ;AACAxB,EAAAA,QAAQ,CAAC;AACLe,IAAAA,IAAI,EAAEpB,UADD;AAELqB,IAAAA,OAAO,EAAEQ;AAFJ,GAAD,CAAR;AAIH,CANM;AAOP,OAAO,MAAMC,UAAU,GAAID,KAAD,IAAWxB,QAAQ,IAAG;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYsB,KAAZ;AACAxB,EAAAA,QAAQ,CAAC;AACLe,IAAAA,IAAI,EAAEnB,WADD;AAELoB,IAAAA,OAAO,EAAEQ;AAFJ,GAAD,CAAR;AAIH,CANM","sourcesContent":["import { POST_USER, LOGIN_USER, SHOW_LOGIN, SHOW_SIGNUP, LOGOUT_USER } from './types';\r\n\r\nexport const postUser = (data) =>  async dispatch =>{\r\n    console.log(data)\r\n    let res = await fetch('http://localhost:5000/users/signup',{\r\n        method: 'POST',\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            password: data.password,\r\n            username:  data.username,\r\n            email: data.email\r\n        })\r\n    })\r\n    let result = await res.json()\r\n    dispatch({\r\n        type: POST_USER,\r\n        payload: result\r\n    })\r\n}\r\nexport const loginUser = (data) => async dispatch =>{\r\n    console.log(data)\r\n    let res = await fetch('http://localhost:5000/users/login',{\r\n        method: 'POST',\r\n        headers: {\r\n            'accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            password: data.password,\r\n            email: data.email\r\n        })\r\n    })\r\n      let result = await res.json()\r\n      window.localStorage.setItem('token', result.token)\r\n      dispatch({\r\n                type: LOGIN_USER,\r\n                payload: result\r\n            })\r\n    // .then(res => res.json())\r\n    // .then(result => {\r\n    //     window.localStorage.setItem('token', result.token)\r\n    //     dispatch({\r\n    //         type: LOGIN_USER,\r\n    //         payload: result\r\n    //     })\r\n    // })\r\n}\r\nexport const logoutUser = () => dispatch =>{\r\n    \r\n    dispatch({\r\n        type: LOGOUT_USER,\r\n        payload: ''\r\n    })\r\n}\r\nexport const showLogin = (state) => dispatch =>{\r\n    console.log(state)\r\n    dispatch({\r\n        type: SHOW_LOGIN,\r\n        payload: state\r\n    })\r\n}\r\nexport const showSignup = (state) => dispatch =>{\r\n    console.log(state)\r\n    dispatch({\r\n        type: SHOW_SIGNUP,\r\n        payload: state\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}