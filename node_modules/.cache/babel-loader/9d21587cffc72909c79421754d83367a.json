{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Jason\\\\Desktop\\\\Coding\\\\fishing_app_houston\\\\Client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { FETCH_MESSAGES, POST_MESSAGE, PATCH_MESSAGE } from \"../actions/types\";\nconst initialState = {\n  messages: [],\n  images: []\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case FETCH_MESSAGES:\n      return _objectSpread({}, state, {\n        messages: action.payload\n      });\n\n    case POST_MESSAGE:\n      return _objectSpread({}, state, {\n        messages: [...state.messages, action.payload] //existing array plus new object!\n\n      });\n\n    case PATCH_MESSAGE:\n      return _objectSpread({}, state, {\n        messages: state.messages.map(message => message._id === action.payload._id ? _objectSpread({}, message, {\n          replies: action.payload.replies\n        }) : message)\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Jason\\Desktop\\Coding\\fishing_app_houston\\Client\\src\\components\\reducers\\messageReducer.js"],"names":["FETCH_MESSAGES","POST_MESSAGE","PATCH_MESSAGE","initialState","messages","images","state","action","type","payload","map","message","_id","replies"],"mappings":";AAAA,SAASA,cAAT,EAAyBC,YAAzB,EAAuCC,aAAvC,QAA4D,kBAA5D;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;AAKA,eAAe,UAASC,KAAK,GAAGH,YAAjB,EAA+BI,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,cAAL;AACE,+BACKM,KADL;AAEEF,QAAAA,QAAQ,EAAEG,MAAM,CAACE;AAFnB;;AAKF,SAAKR,YAAL;AACE,+BACKK,KADL;AAEEF,QAAAA,QAAQ,EAAE,CAAC,GAAGE,KAAK,CAACF,QAAV,EAAoBG,MAAM,CAACE,OAA3B,CAFZ,CAEgD;;AAFhD;;AAIF,SAAKP,aAAL;AACE,+BACKI,KADL;AAEEF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeM,GAAf,CAAmBC,OAAO,IAClCA,OAAO,CAACC,GAAR,KAAgBL,MAAM,CAACE,OAAP,CAAeG,GAA/B,qBAGSD,OAHT;AAIME,UAAAA,OAAO,EAAEN,MAAM,CAACE,OAAP,CAAeI;AAJ9B,aAMIF,OAPI;AAFZ;;AAYF;AACE,aAAOL,KAAP;AA1BJ;AA4BD","sourcesContent":["import { FETCH_MESSAGES, POST_MESSAGE, PATCH_MESSAGE } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  messages: [],\r\n  images: []\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCH_MESSAGES:\r\n      return {\r\n        ...state,\r\n        messages: action.payload\r\n      };\r\n\r\n    case POST_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: [...state.messages, action.payload] //existing array plus new object!\r\n      };\r\n    case PATCH_MESSAGE:\r\n      return {\r\n        ...state,\r\n        messages: state.messages.map(message =>\r\n          message._id === action.payload._id\r\n            ? {\r\n                // finds matching message and replaces the replies Array\r\n                ...message,\r\n                replies: action.payload.replies\r\n              }\r\n            : message\r\n        )\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}