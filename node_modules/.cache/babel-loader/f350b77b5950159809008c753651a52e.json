{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jason\\\\Desktop\\\\Coding\\\\fishing_app_houston\\\\Client\\\\src\\\\components\\\\messages\\\\messages.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchMessages, postMessage, patchMessage } from \"../actions/messageActions\";\nimport { showLogin } from \"../actions/userActions\";\nimport { Button, Comment, Form, Header } from \"semantic-ui-react\";\n\nclass Messages extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      reply: {},\n      message: \"\",\n      isReply: false,\n      idChosen: null,\n      keyChosen: null\n    };\n\n    this.handleChange = event => {\n      const content = event.target.value;\n\n      if (event.target.name === \"comment\") {\n        this.setState({\n          message: content\n        });\n      } else if (event.target.name === \"reply\") {\n        this.setState({\n          reply: content\n        });\n      } else if (event.target.name === \"image\") {\n        console.log(content);\n        this.setState({\n          imageFile: content\n        });\n      }\n    };\n\n    this.handleReplies = (indexOfReply, idOfMessage) => {\n      this.setState({\n        isReply: !this.state.isReply,\n        keyChosen: indexOfReply,\n        idChosen: idOfMessage\n      });\n    };\n\n    this.handleReplySubmit = () => {\n      this.setState({\n        isReply: !this.state.isReply\n      });\n      const data = {\n        message_id: this.state.idChosen,\n        reply: {\n          author: \"me\",\n          content: this.state.reply,\n          date: new Date()\n        }\n      };\n      this.props.patchMessage(data);\n    };\n\n    this.capitalizeUsername = name => {\n      if (name !== undefined) {\n        return name.charAt(0).toUpperCase() + name.slice(1);\n      } else {\n        return null;\n      }\n    };\n\n    this.handleCommentSubmit = event => {\n      const author = this.props.currentUser.username;\n      const messageContent = this.state.message;\n      const data = {\n        lake_id: this.props.lake._id,\n        replies: [],\n        author: author,\n        content: messageContent,\n        date: new Date()\n      };\n      this.props.postMessage(data);\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchMessages(this.props.lake._id); //passing the current lake's id to the fetch to get only related messages\n  }\n\n  render() {\n    const token = window.localStorage.getItem(\"token\");\n    const commentField = React.createElement(Form, {\n      reply: true,\n      onSubmit: () => this.handleCommentSubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Form.TextArea, {\n      name: \"comment\",\n      style: {\n        height: \"50px\"\n      },\n      onChange: event => this.handleChange(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      content: \"Post Comment\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      primary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n    const replyField = React.createElement(Form, {\n      reply: true,\n      onSubmit: () => this.handleReplySubmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Form.TextArea, {\n      name: \"reply\",\n      style: {\n        height: \"50px\"\n      },\n      onChange: event => this.handleChange(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Button, {\n      content: \"Reply\",\n      labelPosition: \"left\",\n      icon: \"edit\",\n      primary: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n    const messages = this.props.messages.map((message, index) => React.createElement(Comment, {\n      key: index,\n      style: {\n        textAlign: \"left\",\n        fontSize: \"1.25vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Comment.Avatar, {\n      src: \"https://react.semantic-ui.com/images/avatar/small/elliot.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(Comment.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Comment.Author, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, this.capitalizeUsername(message.author)), React.createElement(Comment.Metadata, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Yesterday at 12:30AM\")), React.createElement(Comment.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, message.content)), React.createElement(Comment.Actions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, token !== null ? React.createElement(Comment.Action, {\n      style: {\n        color: \"blue\",\n        opacity: \".5\"\n      },\n      onClick: () => this.handleReplies(index, message._id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Reply\") : null, this.state.keyChosen === index && this.state.isReply ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, replyField, \" \") : null)), message.replies.length > 0 ? message.replies.map((reply, index) => React.createElement(Comment.Group, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Comment, {\n      style: {\n        textAlign: \"left\",\n        fontSize: \"1.25vw\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Comment.Avatar, {\n      src: \"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }), React.createElement(Comment.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(Comment.Author, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, this.capitalizeUsername(reply.author)), React.createElement(Comment.Metadata, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Just now\")), React.createElement(Comment.Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, reply.content))))) : null));\n    return React.createElement(Comment.Group, {\n      className: \"comment-group\",\n      style: {\n        backgroundColor: \"rgb(248, 246, 246)\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h1\",\n      dividing: true,\n      style: {\n        fontSize: \"1.5\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.props.lake.name, \"'s Comments\"), messages, token !== null ? commentField : React.createElement(\"h3\", {\n      style: {\n        cursor: \"pointer\",\n        color: \"#069\"\n      },\n      onClick: () => {\n        this.props.showLogin(true);\n        window.scrollTo(0, 0); ////scrolls to top of window when login clicked\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Login To Comment\"));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  messages: state.messageReducer.messages,\n  lake: state.lakeReducer.currentLake,\n  currentUser: state.userReducer.currentUser\n});\n\nexport default connect(mapStateToProps, {\n  fetchMessages,\n  postMessage,\n  patchMessage,\n  showLogin\n})(Messages);","map":{"version":3,"sources":["C:\\Users\\Jason\\Desktop\\Coding\\fishing_app_houston\\Client\\src\\components\\messages\\messages.js"],"names":["React","connect","fetchMessages","postMessage","patchMessage","showLogin","Button","Comment","Form","Header","Messages","Component","state","reply","message","isReply","idChosen","keyChosen","handleChange","event","content","target","value","name","setState","console","log","imageFile","handleReplies","indexOfReply","idOfMessage","handleReplySubmit","data","message_id","author","date","Date","props","capitalizeUsername","undefined","charAt","toUpperCase","slice","handleCommentSubmit","currentUser","username","messageContent","lake_id","lake","_id","replies","componentDidMount","render","token","window","localStorage","getItem","commentField","height","replyField","messages","map","index","textAlign","fontSize","color","opacity","length","backgroundColor","cursor","scrollTo","mapStateToProps","messageReducer","lakeReducer","currentLake","userReducer"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchMessages,\r\n  postMessage,\r\n  patchMessage\r\n} from \"../actions/messageActions\";\r\nimport { showLogin } from \"../actions/userActions\";\r\nimport { Button, Comment, Form, Header } from \"semantic-ui-react\";\r\n\r\nclass Messages extends React.Component {\r\n  state = {\r\n    reply: {},\r\n    message: \"\",\r\n    isReply: false,\r\n    idChosen: null,\r\n    keyChosen: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchMessages(this.props.lake._id);\r\n    //passing the current lake's id to the fetch to get only related messages\r\n  }\r\n\r\n  handleChange = event => {\r\n    const content = event.target.value;\r\n    if (event.target.name === \"comment\") {\r\n      this.setState({\r\n        message: content\r\n      });\r\n    } else if (event.target.name === \"reply\") {\r\n      this.setState({\r\n        reply: content\r\n      });\r\n    } else if (event.target.name === \"image\") {\r\n      console.log(content);\r\n      this.setState({\r\n        imageFile: content\r\n      });\r\n    }\r\n  };\r\n\r\n  handleReplies = (indexOfReply, idOfMessage) => {\r\n    this.setState({\r\n      isReply: !this.state.isReply,\r\n      keyChosen: indexOfReply,\r\n      idChosen: idOfMessage\r\n    });\r\n  };\r\n\r\n  handleReplySubmit = () => {\r\n    this.setState({\r\n      isReply: !this.state.isReply\r\n    });\r\n    const data = {\r\n      message_id: this.state.idChosen,\r\n      reply: {\r\n        author: \"me\",\r\n        content: this.state.reply,\r\n        date: new Date()\r\n      }\r\n    };\r\n    this.props.patchMessage(data);\r\n  };\r\n  capitalizeUsername = name => {\r\n    if (name !== undefined) {\r\n      return name.charAt(0).toUpperCase() + name.slice(1);\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  handleCommentSubmit = event => {\r\n    const author = this.props.currentUser.username;\r\n    const messageContent = this.state.message;\r\n    const data = {\r\n      lake_id: this.props.lake._id,\r\n      replies: [],\r\n      author: author,\r\n      content: messageContent,\r\n      date: new Date()\r\n    };\r\n    this.props.postMessage(data);\r\n  };\r\n\r\n  render() {\r\n    const token = window.localStorage.getItem(\"token\");\r\n\r\n    const commentField = (\r\n      <Form reply onSubmit={() => this.handleCommentSubmit()}>\r\n        <Form.TextArea\r\n          name=\"comment\"\r\n          style={{ height: \"50px\" }}\r\n          onChange={event => this.handleChange(event)}\r\n        />\r\n        <Button\r\n          content=\"Post Comment\"\r\n          labelPosition=\"left\"\r\n          icon=\"edit\"\r\n          primary\r\n        />\r\n      </Form>\r\n    );\r\n\r\n    const replyField = (\r\n      <Form reply onSubmit={() => this.handleReplySubmit()}>\r\n        <Form.TextArea\r\n          name=\"reply\"\r\n          style={{ height: \"50px\" }}\r\n          onChange={event => this.handleChange(event)}\r\n        />\r\n        <Button content=\"Reply\" labelPosition=\"left\" icon=\"edit\" primary />\r\n      </Form>\r\n    );\r\n\r\n    const messages = this.props.messages.map((message, index) => (\r\n      <Comment key={index} style={{ textAlign: \"left\", fontSize: \"1.25vw\" }}>\r\n        <Comment.Avatar src=\"https://react.semantic-ui.com/images/avatar/small/elliot.jpg\" />\r\n        <Comment.Content>\r\n          <Comment.Author>\r\n            {this.capitalizeUsername(message.author)}\r\n          </Comment.Author>\r\n          <Comment.Metadata>\r\n            <div>Yesterday at 12:30AM</div>\r\n          </Comment.Metadata>\r\n          <Comment.Text>\r\n            <p>{message.content}</p>\r\n          </Comment.Text>\r\n          <Comment.Actions>\r\n            {token !== null ? (\r\n              <Comment.Action\r\n                style={{ color: \"blue\", opacity: \".5\" }}\r\n                onClick={() => this.handleReplies(index, message._id)}\r\n              >\r\n                Reply\r\n              </Comment.Action>\r\n            ) : null}\r\n\r\n            {this.state.keyChosen === index && this.state.isReply ? (\r\n              <div>{replyField} </div>\r\n            ) : null}\r\n          </Comment.Actions>\r\n        </Comment.Content>\r\n\r\n        {message.replies.length > 0\r\n          ? message.replies.map((reply, index) => (\r\n              <Comment.Group key={index}>\r\n                <Comment style={{ textAlign: \"left\", fontSize: \"1.25vw\" }}>\r\n                  <Comment.Avatar src=\"https://react.semantic-ui.com/images/avatar/small/jenny.jpg\" />\r\n                  <Comment.Content>\r\n                    <Comment.Author>\r\n                      {this.capitalizeUsername(reply.author)}\r\n                    </Comment.Author>\r\n                    <Comment.Metadata>\r\n                      <div>Just now</div>\r\n                    </Comment.Metadata>\r\n                    <Comment.Text>{reply.content}</Comment.Text>\r\n                  </Comment.Content>\r\n                </Comment>\r\n              </Comment.Group>\r\n            ))\r\n          : null}\r\n      </Comment>\r\n    ));\r\n\r\n    return (\r\n      <Comment.Group\r\n        className=\"comment-group\"\r\n        style={{ backgroundColor: \"rgb(248, 246, 246)\" }}\r\n      >\r\n        <Header as=\"h1\" dividing style={{ fontSize: \"1.5\" }}>\r\n          {this.props.lake.name}'s Comments\r\n        </Header>\r\n        {messages}\r\n        {token !== null ? (\r\n          commentField\r\n        ) : (\r\n          <h3\r\n            style={{ cursor: \"pointer\", color: \"#069\" }}\r\n            onClick={() => {\r\n              this.props.showLogin(true);\r\n              window.scrollTo(0, 0); ////scrolls to top of window when login clicked\r\n            }}\r\n          >\r\n            Login To Comment\r\n          </h3>\r\n        )}\r\n      </Comment.Group>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  messages: state.messageReducer.messages,\r\n  lake: state.lakeReducer.currentLake,\r\n  currentUser: state.userReducer.currentUser\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { fetchMessages, postMessage, patchMessage, showLogin }\r\n)(Messages);\r\n"]},"metadata":{},"sourceType":"module"}